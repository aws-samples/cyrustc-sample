"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const fs = require("fs");
const path = require("path");
const client = new client_dynamodb_1.DynamoDBClient({});
const docClient = lib_dynamodb_1.DynamoDBDocumentClient.from(client);
const handler = async (event, context) => {
    const physicalId = `${process.env.TABLE_NAME}-seeder`;
    try {
        console.log('Event:', JSON.stringify(event, null, 2));
        const tableName = process.env.TABLE_NAME;
        const seedDataFile = process.env.SEED_DATA_FILE;
        const environment = process.env.ENVIRONMENT;
        // Construct the environment-specific path
        const seedDataPath = path.join(__dirname, 'seed-data', environment, seedDataFile);
        console.log('Reading seed data from:', seedDataPath);
        if (!fs.existsSync(seedDataPath)) {
            throw new Error(`Seed data file not found: ${seedDataPath}. Environment: ${environment}`);
        }
        const seedData = JSON.parse(fs.readFileSync(seedDataPath, 'utf8'));
        console.log('Seed data:', JSON.stringify(seedData, null, 2));
        // Process each config item
        for (const item of seedData.configItems) {
            console.log('Writing item:', JSON.stringify(item, null, 2));
            await docClient.send(new lib_dynamodb_1.PutCommand({
                TableName: tableName,
                Item: item,
            }));
        }
        return {
            Status: 'SUCCESS',
            RequestId: event.RequestId,
            LogicalResourceId: event.LogicalResourceId,
            PhysicalResourceId: physicalId,
            StackId: event.StackId,
            Data: {},
        };
    }
    catch (error) {
        console.error('Error seeding DynamoDB:', error);
        return {
            Status: 'FAILED',
            RequestId: event.RequestId,
            LogicalResourceId: event.LogicalResourceId,
            PhysicalResourceId: physicalId,
            StackId: event.StackId,
            Reason: error instanceof Error ? error.message : 'Unknown error',
            Data: {},
        };
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1vZGItc2VlZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZHluYW1vZGItc2VlZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhEQUEwRDtBQUMxRCx3REFBMkU7QUFFM0UseUJBQXlCO0FBQ3pCLDZCQUE2QjtBQUU3QixNQUFNLE1BQU0sR0FBRyxJQUFJLGdDQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDdEMsTUFBTSxTQUFTLEdBQUcscUNBQXNCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBVS9DLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxLQUF3QyxFQUFFLE9BQWdCLEVBQWlELEVBQUU7SUFDekksTUFBTSxVQUFVLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsU0FBUyxDQUFDO0lBRXRELElBQUksQ0FBQztRQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RELE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVyxDQUFDO1FBQzFDLE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBZSxDQUFDO1FBQ2pELE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBWSxDQUFDO1FBRTdDLDBDQUEwQztRQUMxQyxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ2xGLE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFFckQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQztZQUNqQyxNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixZQUFZLGtCQUFrQixXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQzVGLENBQUM7UUFFRCxNQUFNLFFBQVEsR0FBYSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDN0UsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFN0QsMkJBQTJCO1FBQzNCLEtBQUssTUFBTSxJQUFJLElBQUksUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVELE1BQU0sU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLHlCQUFVLENBQUM7Z0JBQ2xDLFNBQVMsRUFBRSxTQUFTO2dCQUNwQixJQUFJLEVBQUUsSUFBSTthQUNYLENBQUMsQ0FBQyxDQUFDO1FBQ04sQ0FBQztRQUVELE9BQU87WUFDTCxNQUFNLEVBQUUsU0FBUztZQUNqQixTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLGlCQUFpQjtZQUMxQyxrQkFBa0IsRUFBRSxVQUFVO1lBQzlCLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztZQUN0QixJQUFJLEVBQUUsRUFBRTtTQUNULENBQUM7SUFDSixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMseUJBQXlCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDaEQsT0FBTztZQUNMLE1BQU0sRUFBRSxRQUFRO1lBQ2hCLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixpQkFBaUIsRUFBRSxLQUFLLENBQUMsaUJBQWlCO1lBQzFDLGtCQUFrQixFQUFFLFVBQVU7WUFDOUIsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3RCLE1BQU0sRUFBRSxLQUFLLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxlQUFlO1lBQ2hFLElBQUksRUFBRSxFQUFFO1NBQ1QsQ0FBQztJQUNKLENBQUM7QUFDSCxDQUFDLENBQUM7QUFqRFcsUUFBQSxPQUFPLFdBaURsQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IER5bmFtb0RCQ2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWR5bmFtb2RiJztcbmltcG9ydCB7IER5bmFtb0RCRG9jdW1lbnRDbGllbnQsIFB1dENvbW1hbmQgfSBmcm9tICdAYXdzLXNkay9saWItZHluYW1vZGInO1xuaW1wb3J0IHsgQ2xvdWRGb3JtYXRpb25DdXN0b21SZXNvdXJjZUV2ZW50LCBDbG91ZEZvcm1hdGlvbkN1c3RvbVJlc291cmNlUmVzcG9uc2UsIENvbnRleHQgfSBmcm9tICdhd3MtbGFtYmRhJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5cbmNvbnN0IGNsaWVudCA9IG5ldyBEeW5hbW9EQkNsaWVudCh7fSk7XG5jb25zdCBkb2NDbGllbnQgPSBEeW5hbW9EQkRvY3VtZW50Q2xpZW50LmZyb20oY2xpZW50KTtcblxuaW50ZXJmYWNlIFNlZWREYXRhIHtcbiAgY29uZmlnSXRlbXM6IEFycmF5PHtcbiAgICBwazogc3RyaW5nO1xuICAgIHNrOiBzdHJpbmc7XG4gICAgY29uZmlnVmFsdWU6IGFueTtcbiAgfT47XG59XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBDbG91ZEZvcm1hdGlvbkN1c3RvbVJlc291cmNlRXZlbnQsIGNvbnRleHQ6IENvbnRleHQpOiBQcm9taXNlPENsb3VkRm9ybWF0aW9uQ3VzdG9tUmVzb3VyY2VSZXNwb25zZT4gPT4ge1xuICBjb25zdCBwaHlzaWNhbElkID0gYCR7cHJvY2Vzcy5lbnYuVEFCTEVfTkFNRX0tc2VlZGVyYDtcbiAgXG4gIHRyeSB7XG4gICAgY29uc29sZS5sb2coJ0V2ZW50OicsIEpTT04uc3RyaW5naWZ5KGV2ZW50LCBudWxsLCAyKSk7XG4gICAgY29uc3QgdGFibGVOYW1lID0gcHJvY2Vzcy5lbnYuVEFCTEVfTkFNRSE7XG4gICAgY29uc3Qgc2VlZERhdGFGaWxlID0gcHJvY2Vzcy5lbnYuU0VFRF9EQVRBX0ZJTEUhO1xuICAgIGNvbnN0IGVudmlyb25tZW50ID0gcHJvY2Vzcy5lbnYuRU5WSVJPTk1FTlQhO1xuXG4gICAgLy8gQ29uc3RydWN0IHRoZSBlbnZpcm9ubWVudC1zcGVjaWZpYyBwYXRoXG4gICAgY29uc3Qgc2VlZERhdGFQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJ3NlZWQtZGF0YScsIGVudmlyb25tZW50LCBzZWVkRGF0YUZpbGUpO1xuICAgIGNvbnNvbGUubG9nKCdSZWFkaW5nIHNlZWQgZGF0YSBmcm9tOicsIHNlZWREYXRhUGF0aCk7XG4gICAgXG4gICAgaWYgKCFmcy5leGlzdHNTeW5jKHNlZWREYXRhUGF0aCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgU2VlZCBkYXRhIGZpbGUgbm90IGZvdW5kOiAke3NlZWREYXRhUGF0aH0uIEVudmlyb25tZW50OiAke2Vudmlyb25tZW50fWApO1xuICAgIH1cblxuICAgIGNvbnN0IHNlZWREYXRhOiBTZWVkRGF0YSA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKHNlZWREYXRhUGF0aCwgJ3V0ZjgnKSk7XG4gICAgY29uc29sZS5sb2coJ1NlZWQgZGF0YTonLCBKU09OLnN0cmluZ2lmeShzZWVkRGF0YSwgbnVsbCwgMikpO1xuXG4gICAgLy8gUHJvY2VzcyBlYWNoIGNvbmZpZyBpdGVtXG4gICAgZm9yIChjb25zdCBpdGVtIG9mIHNlZWREYXRhLmNvbmZpZ0l0ZW1zKSB7XG4gICAgICBjb25zb2xlLmxvZygnV3JpdGluZyBpdGVtOicsIEpTT04uc3RyaW5naWZ5KGl0ZW0sIG51bGwsIDIpKTtcbiAgICAgIGF3YWl0IGRvY0NsaWVudC5zZW5kKG5ldyBQdXRDb21tYW5kKHtcbiAgICAgICAgVGFibGVOYW1lOiB0YWJsZU5hbWUsXG4gICAgICAgIEl0ZW06IGl0ZW0sXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIFN0YXR1czogJ1NVQ0NFU1MnLFxuICAgICAgUmVxdWVzdElkOiBldmVudC5SZXF1ZXN0SWQsXG4gICAgICBMb2dpY2FsUmVzb3VyY2VJZDogZXZlbnQuTG9naWNhbFJlc291cmNlSWQsXG4gICAgICBQaHlzaWNhbFJlc291cmNlSWQ6IHBoeXNpY2FsSWQsXG4gICAgICBTdGFja0lkOiBldmVudC5TdGFja0lkLFxuICAgICAgRGF0YToge30sXG4gICAgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzZWVkaW5nIER5bmFtb0RCOicsIGVycm9yKTtcbiAgICByZXR1cm4ge1xuICAgICAgU3RhdHVzOiAnRkFJTEVEJyxcbiAgICAgIFJlcXVlc3RJZDogZXZlbnQuUmVxdWVzdElkLFxuICAgICAgTG9naWNhbFJlc291cmNlSWQ6IGV2ZW50LkxvZ2ljYWxSZXNvdXJjZUlkLFxuICAgICAgUGh5c2ljYWxSZXNvdXJjZUlkOiBwaHlzaWNhbElkLFxuICAgICAgU3RhY2tJZDogZXZlbnQuU3RhY2tJZCxcbiAgICAgIFJlYXNvbjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcicsXG4gICAgICBEYXRhOiB7fSxcbiAgICB9O1xuICB9XG59OyAiXX0=