---
description: 
globs: 
alwaysApply: false
---
# AWS CDK Best Practices

This project follows specific patterns and practices for AWS CDK development.

## Stack Organization

The infrastructure is structured using nested stacks:
- [infrastructure/lib/backend-stack.ts](mdc:infrastructure/lib/backend-stack.ts): Main stack
- Domain-specific nested stacks:
  - [infrastructure/lib/stacks/dynamodb.stack.ts](mdc:infrastructure/lib/stacks/dynamodb.stack.ts)
  - [infrastructure/lib/stacks/step-functions.stack.ts](mdc:infrastructure/lib/stacks/step-functions.stack.ts)

## Construct Pattern

Resources are organized as reusable constructs:
- Each resource type gets its own construct
- Constructs are combined in stacks
- Properties are passed explicitly between constructs

Example:
```typescript
// Create the hello world step function
this.helloWorldStepFunction = new HelloWorldStepFunction(this, 'HelloWorldStepFunction', {
  prefix: props.prefix,
  environment: props.environment,
  dynamodbStack: props.dynamodbStack, // Pass the entire DynamoDB stack
  layer: this.lambdaLayer, // Pass the layer
  tags: {
    Service: 'StepFunctions',
    Feature: 'HelloWorld'
  }
});
```

## Environment Awareness

Infrastructure adapts to different environments:
```typescript
// Get environment from CDK context
const environment = stack.node.tryGetContext('environment');
const isDevEnvironment = environment === 'local' || environment === 'dev';

// Apply environment-specific settings
this.table = new dynamodb.Table(this, "TableName", {
  removalPolicy: isDevEnvironment ? 
    cdk.RemovalPolicy.DESTROY : 
    cdk.RemovalPolicy.RETAIN,
  // Other settings...
});
```

## Common Patterns

1. **Property Management**:
   - Common properties like `dynamodbStack` and `layer` are passed through constructors
   - Base classes initialize shared properties for derived classes to use

2. **Lifecycle Management**:
   - BaseStepFunction manages the execution order of lifecycle methods
   - Properties are initialized before dependent methods are called

3. **Resource Naming**:
   - Consistent naming with environment and prefix: `${prefix}-${resourceId}-${environment}`
   - Clear pattern for CloudWatch resources: `/aws/vendedlogs/states/${stateMachineName}`

4. **CloudFormation Outputs**:
   - Important resources are exported as CloudFormation outputs
   - Enables cross-stack references using `${id}-ResourceName` format
