---
description: 
globs: 
alwaysApply: false
---
# DynamoDB Patterns

This project follows a standardized approach for working with DynamoDB tables.

## Table Structure

Tables are defined as constructs:
[infrastructure/lib/dynamodb/hello-world-table.construct.ts](mdc:infrastructure/lib/dynamodb/hello-world-table.construct.ts)

Key characteristics:
- Single-table design pattern
- Environment-aware configuration
- Stream-enabled for integration with Step Functions
- Point-in-time recovery enabled

## Access Patterns

Tables are accessed via the `DynamoDBStack`:
[infrastructure/lib/stacks/dynamodb.stack.ts](mdc:infrastructure/lib/stacks/dynamodb.stack.ts)

This pattern allows:
- Central management of all tables
- Consistent naming conventions
- Simplified reference passing

## Table Naming Structure

Table references follow this pattern:
```typescript
// Access table via the DynamoDB stack
const table = this.dynamodbStack.tableName.table;

// Use the table reference
table.grantReadWriteData(lambdaFunction);
```

## Step Function Integration

Tables with streams are connected to Step Functions using EventBridge Pipes:
[infrastructure/lib/step-functions/hello-world/_hello-world-sfn.construct.ts](mdc:infrastructure/lib/step-functions/hello-world/_hello-world-sfn.construct.ts)

The process:
1. DynamoDB emits stream events
2. EventBridge Pipe captures and filters events
3. Step Function is triggered with transformed event payload

## Environment Configuration

Table configurations adjust based on environment:
- Development: `RemovalPolicy.DESTROY` for easy cleanup
- Production: `RemovalPolicy.RETAIN` to prevent data loss
